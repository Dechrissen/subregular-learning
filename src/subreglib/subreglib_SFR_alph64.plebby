# https://github.com/vvulpes0/Language-Toolkit-2 (use DEVELOPMENT branch)

#################################################
#   CLS.a.k.i/m
#
#   CLS: class
#   a: alphabet size
#   k : the k-value
#   i : enumerator of lgs (should be unique)
#   m : mod value (for Properly Regular languages) 
##################################################

#=universe {/a, /b, /c, /d, /e, /f, /g, /h, /i, /j, /k, /l, /m, /n, /o, /p, /q, /r, /s, /t, /u, /v, /w, /x, /y, /z, /A, /B, /C, /D, /E, /F, /G, /H, /I, /J, /K, /L, /M, /N, /O, /P, /Q, /R, /S, /T, /U, /V, /W, /X, /Y, /Z, /á, /à, /ǎ, /é, /è, /ě, /ó, /ò, /ǒ, /ú, /ù, /ǔ}

=universe {/a, /b, /c, /d, /e, /f, /g, /h, /i, /j, /k, /l, /m, /n, /o, /p, /q, /r, /s, /t, /u, /v, /w, /x, /y, /z, /A, /B, /C, /D, /E, /F, /G, /H, /I, /J, /K, /L, /M, /N, /O, /P, /Q, /R, /S, /T, /U, /V, /W, /X, /Y, /Z, /0, /1, /2, /3, /4, /5, /6, /7, /8, /9, /+, /-}

=aa  </a /a>
=ab  </a /b>
=ac  </a /c>
=ad  </a /d>
=ba  </b /a>
=bb  </b /b>
=bc  </b /c>
=bd  </b /d>
=cd  </c /d>

=aa' </a,/a>
=ab' </a,/b>
=ac' </a,/c>
=ad' </a,/d>
=ba' </b,/a>
=bb' </b,/b>
=bc' </b,/c>
=bd' </b,/d>
=cd' </c,/d>

=least2aa </a /a,/a /a>
=least3aa @@{least2aa,aa}
=least5aa @@{least2aa,least3aa}
=least6aa @@{least3aa,least3aa}

=least2ab </a /b,/a /b>
=least3ab @@{least2ab,ab}
=least5ab @@{least2ab,least3ab}
=least6ab @@{least3ab,least3ab}



# need these to define some SF languages

=PT.64.2.0    ∨{¬aa',ab'}
=PT.64.2.1    ∨{¬aa',bb'}
=PT.64.2.2    ∨{¬ab',cd'}
=PT.64.2.3    ∧{∨{¬aa',ab'},∨{¬ab',aa'}}
=PT.64.2.4    ∧{∨{¬aa',bb'},∨{¬bb',aa'}}
=PT.64.2.5    ∧{∨{¬ab',cd'},∨{¬cd',ab'}}
=PT.64.2.6    ∧{PT.64.2.0,PT.64.2.1}
=PT.64.2.7    ∨{PT.64.2.0,PT.64.2.1}

=LTT.64.3.2.0 ∧{least2aa,¬least3aa}
=LTT.64.3.2.1 ∧{least2ab,¬least3ab}
=LTT.64.6.2.0 ∧{least5aa,¬least6aa}
=LTT.64.6.2.1 ∧{least5ab,¬least6ab}




# PROPERLY STAR FREE


=SF.64.1.0 ~@(|%</b>, ~</a>, %|</b>) # complement of strings with 2 bs without an a between them
=SF.64.1.1 ~@(|%</a>, ~</b>, %|</a>) # complement of strings with 2 as without an b between them
=SF.64.1.2 /\{SF.64.1.0,SF.64.1.1}
=SF.64.1.3 /\{SF.64.1.0,LTT.64.3.2.0}
=SF.64.1.4 /\{SF.64.1.0,PT.64.2.0}

=SF.64.2.0 ~@(|%</a /b>, ~</b /a>, %|</a /b>) # complement of strings with 2 abs without a ba between them
=SF.64.2.1 ~@(|%</b /a>, ~</a /b>, %|</b /a>) # complement of strings with 2 bas without an ab between them
=SF.64.2.2 /\{SF.64.2.0,SF.64.2.1}
=SF.64.2.3 /\{SF.64.2.0,LTT.64.3.2.0}
=SF.64.2.4 /\{SF.64.2.0,PT.64.2.0}


# PROPERLY REGULAR    

=a       </a>
=abc     </a /b /c>
=abcd	 </a /b /c /d>
=HaH     %||%</a>
=HbH     %||%</b>
=HcH     %||%</c>
=HdH     %||%</d>
=HabH    %||%</a /b>
=HabcH   %||%</a /b /c>
=HabcdH  %||%</a /b /c /d>


# a mod 2 = 0, (even-a)
=R.64.1.m2 @{~a,*@{HaH,~a,HaH,~a}}

# a mod 3 = 0
=R.64.1.m3 @{~a,*@{HaH,~a,HaH,~a,HaH,~a}}

# #a mod 7 = 0
=R.64.1.m7 @{~a,*@{HaH,~a,HaH,~a,HaH,~a,HaH,~a,HaH,~a,HaH,~a,HaH,~a}}



# ab mod 2 = 0, (even-ab)
=R.64.2.m2 @{~ab,*@{HabH,~ab,HabH,~ab}}

# ab mod 3 = 0
=R.64.2.m3 @{~ab,*@{HabH,~ab,HabH,~ab,HabH,~ab}}

# ab mod 7 = 0
=R.64.2.m7 @{~ab,*@{HabH,~ab,HabH,~ab,HabH,~ab,HabH,~ab,HabH,~ab,HabH,~ab,HabH,~ab}}



# abc mod 2 = 0, (even-abc)
=R.64.3.m2 @{~abc,*@{HabcH,~abc,HabcH,~abc}}

# abc mod 3 = 0
=R.64.3.m3 @{~abc,*@{HabcH,~abc,HabcH,~abc,HabcH,~abc}}

# abc mod 7 = 0
=R.64.3.m7 @{~abc,*@{HabcH,~abc,HabcH,~abc,HabcH,~abc,HabcH,~abc,HabcH,~abc,HabcH,~abc,HabcH,~abc}}



# abcd mod 2 = 0, (even-abcd)
=R.64.4.m2 @{~abcd,*@{HabcdH,~abcd,HabcdH,~abcd}}

# abcd mod 3 = 0
=R.64.4.m3 @{~abcd,*@{HabcdH,~abcd,HabcdH,~abcd,HabcdH,~abcd}}

# abcd mod 7 = 0
=R.64.4.m7 @{~abcd,*@{HabcdH,~abcd,HabcdH,~abcd,HabcdH,~abcd,HabcdH,~abcd,HabcdH,~abcd,HabcdH,~abcd,HabcdH,~abcd}}





####################
# WRITING THE FSAs #
####################


:writeatt ../fstlib/att_format/SF.64.1.0.att ins.txt outs.txt SF.64.1.0
:writeatt ../fstlib/att_format/SF.64.1.1.att ins.txt outs.txt SF.64.1.1
:writeatt ../fstlib/att_format/SF.64.1.2.att ins.txt outs.txt SF.64.1.2
:writeatt ../fstlib/att_format/SF.64.1.3.att ins.txt outs.txt SF.64.1.3
:writeatt ../fstlib/att_format/SF.64.1.4.att ins.txt outs.txt SF.64.1.4
:writeatt ../fstlib/att_format/SF.64.2.0.att ins.txt outs.txt SF.64.2.0
:writeatt ../fstlib/att_format/SF.64.2.1.att ins.txt outs.txt SF.64.2.1
:writeatt ../fstlib/att_format/SF.64.2.2.att ins.txt outs.txt SF.64.2.2
:writeatt ../fstlib/att_format/SF.64.2.3.att ins.txt outs.txt SF.64.2.3
:writeatt ../fstlib/att_format/SF.64.2.4.att ins.txt outs.txt SF.64.2.4


:writeatt ../fstlib/att_format/R.64.1.m2.att ins.txt outs.txt R.64.1.m2
:writeatt ../fstlib/att_format/R.64.1.m3.att ins.txt outs.txt R.64.1.m3
:writeatt ../fstlib/att_format/R.64.1.m7.att ins.txt outs.txt R.64.1.m7
:writeatt ../fstlib/att_format/R.64.2.m2.att ins.txt outs.txt R.64.2.m2
:writeatt ../fstlib/att_format/R.64.2.m3.att ins.txt outs.txt R.64.2.m3
:writeatt ../fstlib/att_format/R.64.2.m7.att ins.txt outs.txt R.64.2.m7
:writeatt ../fstlib/att_format/R.64.3.m2.att ins.txt outs.txt R.64.3.m2
:writeatt ../fstlib/att_format/R.64.3.m3.att ins.txt outs.txt R.64.3.m3
:writeatt ../fstlib/att_format/R.64.3.m7.att ins.txt outs.txt R.64.3.m7
:writeatt ../fstlib/att_format/R.64.4.m2.att ins.txt outs.txt R.64.4.m2
:writeatt ../fstlib/att_format/R.64.4.m3.att ins.txt outs.txt R.64.4.m3
:writeatt ../fstlib/att_format/R.64.4.m7.att ins.txt outs.txt R.64.4.m7